// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

void _checkEnvVar(String name) {
  if (dotenv.env[name] == null || dotenv.env[name]!.isEmpty) {
    throw Exception('Missing required environment variable: $name');
  }
}

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web {
    _checkEnvVar('FIREBASE_API_KEY');
    _checkEnvVar('FIREBASE_APP_ID');
    _checkEnvVar('FIREBASE_MESSAGING_SENDER_ID');
    _checkEnvVar('FIREBASE_PROJECT_ID');
    _checkEnvVar('FIREBASE_AUTH_DOMAIN');
    _checkEnvVar('FIREBASE_STORAGE_BUCKET');
    _checkEnvVar('FIREBASE_MEASUREMENT_ID');

    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_API_KEY']!,
      appId: dotenv.env['FIREBASE_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_PROJECT_ID']!,
      authDomain: dotenv.env['FIREBASE_AUTH_DOMAIN']!,
      storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET']!,
      measurementId: dotenv.env['FIREBASE_MEASUREMENT_ID']!,
    );
  }

  static FirebaseOptions get android {
    _checkEnvVar('FIREBASE_API_KEY');
    _checkEnvVar('FIREBASE_APP_ID');
    _checkEnvVar('FIREBASE_MESSAGING_SENDER_ID');
    _checkEnvVar('FIREBASE_PROJECT_ID');
    _checkEnvVar('FIREBASE_STORAGE_BUCKET');

    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_API_KEY']!,
      appId: dotenv.env['FIREBASE_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_PROJECT_ID']!,
      storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET']!,
    );
  }

  static FirebaseOptions get ios {
    _checkEnvVar('FIREBASE_API_KEY');
    _checkEnvVar('FIREBASE_APP_ID');
    _checkEnvVar('FIREBASE_MESSAGING_SENDER_ID');
    _checkEnvVar('FIREBASE_PROJECT_ID');
    _checkEnvVar('FIREBASE_STORAGE_BUCKET');
    _checkEnvVar('FIREBASE_IOS_BUNDLE_ID');

    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_API_KEY']!,
      appId: dotenv.env['FIREBASE_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_PROJECT_ID']!,
      storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET']!,
      iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID']!,
    );
  }

  static FirebaseOptions get macos {
    _checkEnvVar('FIREBASE_API_KEY');
    _checkEnvVar('FIREBASE_APP_ID');
    _checkEnvVar('FIREBASE_MESSAGING_SENDER_ID');
    _checkEnvVar('FIREBASE_PROJECT_ID');
    _checkEnvVar('FIREBASE_STORAGE_BUCKET');
    _checkEnvVar('FIREBASE_IOS_BUNDLE_ID');

    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_API_KEY']!,
      appId: dotenv.env['FIREBASE_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_PROJECT_ID']!,
      storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET']!,
      iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID']!,
    );
  }

  static FirebaseOptions get windows {
    _checkEnvVar('FIREBASE_API_KEY');
    _checkEnvVar('FIREBASE_APP_ID');
    _checkEnvVar('FIREBASE_MESSAGING_SENDER_ID');
    _checkEnvVar('FIREBASE_PROJECT_ID');
    _checkEnvVar('FIREBASE_AUTH_DOMAIN');
    _checkEnvVar('FIREBASE_STORAGE_BUCKET');
    _checkEnvVar('FIREBASE_MEASUREMENT_ID');

    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_API_KEY']!,
      appId: dotenv.env['FIREBASE_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_PROJECT_ID']!,
      authDomain: dotenv.env['FIREBASE_AUTH_DOMAIN']!,
      storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET']!,
      measurementId: dotenv.env['FIREBASE_MEASUREMENT_ID']!,
    );
  }
}
